<?xml version="1.0"?>
<launch>

    <!-- ROSPlan turtlebot3 demo with ROSPlan -->

    <arg name="map_file" default="$(find pddl_turtle)/map/map3.yaml"/>
    <arg name="gazebo_gui" default="true"/> 

    <!-- turtlebot3 simulation navigation ect-->
    <include file="$(find pddl_turtle)/launch/turtlebot3_bringup_sim.launch" >
        <arg name="gazebo_gui" value="$(arg gazebo_gui)"/>
    </include> 

    

    <!-- ROSPlan -->
    <include file="$(find rosplan_planning_system)/launch/interfaced_planning_system.launch" >
        <arg name="domain_path" value="$(find pddl_turtle)/pddl/domain.pddl" />
        <!-- load a particular initial state into KB at startup (optional) -->
        <!-- we leave it empty because in this demo we use a bash script to upload information to KB, not a pddl problem -->
        <arg name="problem_path" value="$(find pddl_turtle)/pddl/problem.pddl" />
        <!-- automatically generated pddl problem will be created here -->
        <arg name="autom_gen_problem_path" value="$(find pddl_turtle)/pddl/problem_out.pddl" />
        <!-- planner will produce output plan and write to this location -->
        <arg name="data_path" value="$(find pddl_turtle)/pddl/" />
    </include>
    <!-- sim actions -->

    <node name="go_through_interface" pkg="pddl_turtle" type="goThroughInterface" respawn="false" output="screen">
		<param name="knowledge_base"		value="rosplan_knowledge_base" />
		<param name="pddl_action_name"		value="go_through" />
		<param name="action_dispatch_topic" value="/rosplan_plan_dispatcher/action_dispatch" />
		<param name="action_feedback_topic" value="/rosplan_plan_dispatcher/action_feedback" />
	</node>

    <node name="open_interface" pkg="pddl_turtle" type="openInterface" respawn="false" output="screen">
		<param name="knowledge_base"		value="rosplan_knowledge_base" />
		<param name="pddl_action_name"		value="open_door" />
		<param name="action_dispatch_topic" value="/rosplan_plan_dispatcher/action_dispatch" />
		<param name="action_feedback_topic" value="/rosplan_plan_dispatcher/action_feedback" />
	</node>

    <node name="go_to_interface" pkg="pddl_turtle" type="goToInterface" respawn="false" output="screen">
		<param name="knowledge_base"		value="rosplan_knowledge_base" />
		<param name="pddl_action_name"		value="go_to_door" />
		<param name="action_dispatch_topic" value="/rosplan_plan_dispatcher/action_dispatch" />
		<param name="action_feedback_topic" value="/rosplan_plan_dispatcher/action_feedback" />
	</node>
    <!-- rosplan move base action interface, makes link between rosplan dispatcher and hardware 
    <node pkg="rosplan_interface_movebase" type="rpmovebase" name="rosplan_interface_movebase" respawn="false" output="screen">
        <param name="knowledge_base" value="rosplan_knowledge_base" />
        <param name="action_server" value="/move_base" />
        <param name="pddl_action_name" value="goto_waypoint" />
        <param name="action_dispatch_topic" value="/rosplan_plan_dispatcher/action_dispatch" />
        <param name="action_feedback_topic" value="/rosplan_plan_dispatcher/action_feedback" />
    </node> -->

    <!-- visualisation of robot sensor data 
    <node name="rviz" pkg="rviz" type="rviz" args="-d $(find rosplan_turtlebot3_demo)/config/turtlebot3.rviz" /> -->

</launch>
